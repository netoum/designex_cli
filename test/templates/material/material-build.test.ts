import { runCommand } from '@oclif/test'
import { expect } from 'chai'
import fs from 'node:fs/promises'
import path from 'node:path'
after(async () => {
  try {
    await fs.rm(path.resolve('test/tmp/designex_material_build'), { recursive: true })
  } catch { }
})
describe('material Template Build', () => {
  it('Build material/tokens-studio/single', async () => {
    await runCommand('setup --dir=test/tmp/designex_material_build --template=material/tokens-studio/single')
    const { stdout } = await runCommand('build --dir=test/tmp/designex_material_build')
    expect(stdout).to.contain('Executing script at:')
    expect(stdout).to.contain('designex_material_build')
    expect(stdout).to.contain('build.mjs')
    expect(stdout).to.contain('$metadata.json')
    expect(stdout).to.contain('$themes.json')
    expect(stdout).to.contain('Light.json')
    expect(stdout).to.contain('Light High Contrast.json')
    expect(stdout).to.contain('Light Medium Contrast.json')
    expect(stdout).to.contain('Dark.json')
    expect(stdout).to.contain('Dark High Contrast.json')
    expect(stdout).to.contain('Dark Medium Contrast.json')
    expect(stdout).to.contain('Monochrome LT.json')
    expect(stdout).to.contain('Monochrome DT.json')
    expect(stdout).to.contain('Pink LT.json')
    expect(stdout).to.contain('Pink DT.json')
    expect(stdout).to.contain('Rose LT.json')
    expect(stdout).to.contain('Rose DT.json')
    expect(stdout).to.contain('Red LT.json')
    expect(stdout).to.contain('Red DT.json')
    expect(stdout).to.contain('Orange LT.json')
    expect(stdout).to.contain('Orange DT.json')
    expect(stdout).to.contain('Yellow LT.json')
    expect(stdout).to.contain('Yellow DT.json')
    expect(stdout).to.contain('Chartreuse LT.json')
    expect(stdout).to.contain('Chartreuse DT.json')
    expect(stdout).to.contain('Green LT.json')
    expect(stdout).to.contain('Green DT.json')
    expect(stdout).to.contain('Teal LT.json')
    expect(stdout).to.contain('Teal DT.json')
    expect(stdout).to.contain('Cyan LT.json')
    expect(stdout).to.contain('Cyan DT.json')
    expect(stdout).to.contain('Blue LT.json')
    expect(stdout).to.contain('Blue DT.json')
    expect(stdout).to.contain('Indigo LT.json')
    expect(stdout).to.contain('Indigo DT.json')
    expect(stdout).to.contain('Purple LT.json')
    expect(stdout).to.contain('Purple DT.json')
    expect(stdout).to.contain('Baseline.json')
    expect(stdout).to.contain('Wireframe.json')
    expect(stdout).to.contain('✅ Tokens transformed successfully')
    expect(stdout).to.contain('Baseline.css')
    expect(stdout).to.contain('Wireframe.css')
    expect(stdout).to.contain('Shape/Baseline.css')
    expect(stdout).to.contain('Light.css')
    expect(stdout).to.contain('Light High Contrast.css')
    expect(stdout).to.contain('Light Medium Contrast.css')
    expect(stdout).to.contain('Dark.css')
    expect(stdout).to.contain('Dark High Contrast.css')
    expect(stdout).to.contain('Dark Medium Contrast.css')
    expect(stdout).to.contain('Monochrome LT.css')
    expect(stdout).to.contain('Monochrome DT.css')
    expect(stdout).to.contain('Pink LT.css')
    expect(stdout).to.contain('Pink DT.css')
    expect(stdout).to.contain('Rose LT.css')
    expect(stdout).to.contain('Rose DT.css')
    expect(stdout).to.contain('Red LT.css')
    expect(stdout).to.contain('Red DT.css')
    expect(stdout).to.contain('Orange LT.css')
    expect(stdout).to.contain('Orange DT.css')
    expect(stdout).to.contain('Yellow LT.css')
    expect(stdout).to.contain('Yellow DT.css')
    expect(stdout).to.contain('Chartreuse LT.css')
    expect(stdout).to.contain('Chartreuse DT.css')
    expect(stdout).to.contain('Green LT.css')
    expect(stdout).to.contain('Green DT.css')
    expect(stdout).to.contain('Teal LT.css')
    expect(stdout).to.contain('Teal DT.css')
    expect(stdout).to.contain('Cyan LT.css')
    expect(stdout).to.contain('Cyan DT.css')
    expect(stdout).to.contain('Blue LT.css')
    expect(stdout).to.contain('Blue DT.css')
    expect(stdout).to.contain('Indigo LT.css')
    expect(stdout).to.contain('Indigo DT.css')
    expect(stdout).to.contain('Purple LT.css')
    expect(stdout).to.contain('Purple DT.css')
    expect(stdout).to.contain('✅ Script executed successfully.')
    expect(stdout).to.contain('✅ Build completed successfully')
  })
  it('Build material/tokens-studio/multi', async () => {
    await runCommand('setup --dir=test/tmp/designex_material_build --template=material/tokens-studio/multi')
    const { stdout } = await runCommand('build --dir=test/tmp/designex_material_build')
    expect(stdout).to.contain('Executing script at:')
    expect(stdout).to.contain('build.mjs')
    expect(stdout).to.not.contain('$metadata.json')
    expect(stdout).to.not.contain('$themes.json')
    expect(stdout).to.not.contain('Light.json')
    expect(stdout).to.not.contain('Light High Contrast.json')
    expect(stdout).to.not.contain('Light Medium Contrast.json')
    expect(stdout).to.not.contain('Dark.json')
    expect(stdout).to.not.contain('Dark High Contrast.json')
    expect(stdout).to.not.contain('Dark Medium Contrast.json')
    expect(stdout).to.not.contain('Monochrome LT.json')
    expect(stdout).to.not.contain('Monochrome DT.json')
    expect(stdout).to.not.contain('Pink LT.json')
    expect(stdout).to.not.contain('Pink DT.json')
    expect(stdout).to.not.contain('Rose LT.json')
    expect(stdout).to.not.contain('Rose DT.json')
    expect(stdout).to.not.contain('Red LT.json')
    expect(stdout).to.not.contain('Red DT.json')
    expect(stdout).to.not.contain('Orange LT.json')
    expect(stdout).to.not.contain('Orange DT.json')
    expect(stdout).to.not.contain('Yellow LT.json')
    expect(stdout).to.not.contain('Yellow DT.json')
    expect(stdout).to.not.contain('Chartreuse LT.json')
    expect(stdout).to.not.contain('Chartreuse DT.json')
    expect(stdout).to.not.contain('Green LT.json')
    expect(stdout).to.not.contain('Green DT.json')
    expect(stdout).to.not.contain('Teal LT.json')
    expect(stdout).to.not.contain('Teal DT.json')
    expect(stdout).to.not.contain('Cyan LT.json')
    expect(stdout).to.not.contain('Cyan DT.json')
    expect(stdout).to.not.contain('Blue LT.json')
    expect(stdout).to.not.contain('Blue DT.json')
    expect(stdout).to.not.contain('Indigo LT.json')
    expect(stdout).to.not.contain('Indigo DT.json')
    expect(stdout).to.not.contain('Purple LT.json')
    expect(stdout).to.not.contain('Purple DT.json')
    expect(stdout).to.not.contain('Baseline.json')
    expect(stdout).to.not.contain('Wireframe.json')
    expect(stdout).to.not.contain('✅ Tokens transformed successfully')
    expect(stdout).to.contain('Baseline.css')
    expect(stdout).to.contain('Wireframe.css')
    expect(stdout).to.contain('Shape/Baseline.css')
    expect(stdout).to.contain('Light.css')
    expect(stdout).to.contain('Light High Contrast.css')
    expect(stdout).to.contain('Light Medium Contrast.css')
    expect(stdout).to.contain('Dark.css')
    expect(stdout).to.contain('Dark High Contrast.css')
    expect(stdout).to.contain('Dark Medium Contrast.css')
    expect(stdout).to.contain('Monochrome LT.css')
    expect(stdout).to.contain('Monochrome DT.css')
    expect(stdout).to.contain('Pink LT.css')
    expect(stdout).to.contain('Pink DT.css')
    expect(stdout).to.contain('Rose LT.css')
    expect(stdout).to.contain('Rose DT.css')
    expect(stdout).to.contain('Red LT.css')
    expect(stdout).to.contain('Red DT.css')
    expect(stdout).to.contain('Orange LT.css')
    expect(stdout).to.contain('Orange DT.css')
    expect(stdout).to.contain('Yellow LT.css')
    expect(stdout).to.contain('Yellow DT.css')
    expect(stdout).to.contain('Chartreuse LT.css')
    expect(stdout).to.contain('Chartreuse DT.css')
    expect(stdout).to.contain('Green LT.css')
    expect(stdout).to.contain('Green DT.css')
    expect(stdout).to.contain('Teal LT.css')
    expect(stdout).to.contain('Teal DT.css')
    expect(stdout).to.contain('Cyan LT.css')
    expect(stdout).to.contain('Cyan DT.css')
    expect(stdout).to.contain('Blue LT.css')
    expect(stdout).to.contain('Blue DT.css')
    expect(stdout).to.contain('Indigo LT.css')
    expect(stdout).to.contain('Indigo DT.css')
    expect(stdout).to.contain('Purple LT.css')
    expect(stdout).to.contain('Purple DT.css')
    expect(stdout).to.contain('✅ Script executed successfully.')
    expect(stdout).to.contain('✅ Build completed successfully')
  })
})
